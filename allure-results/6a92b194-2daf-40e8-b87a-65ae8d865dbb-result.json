{"name": "Тест при добавлении ингредиента в заказ, увеличивается каунтер данного ингредиента", "status": "passed", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:552:5\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16", "trace": "self = <tests.test_main_func.TestMainFunc object at 0x0000021488C17350>, driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"8277fa02-368e-46db-88dd-9456b1d5d213\")>\n\n    @allure.title('Тест при добавлении ингредиента в заказ, увеличивается каунтер данного ингредиента')\n    @pytest.mark.parametrize('driver', ['chrome', 'firefox'], indirect=True)\n    def test_add_ingredient_into_order(self, driver):\n        driver.get(f'{URL_MAIN_PAGE}{URL_LOGIN_PAGE}')\n    \n        main_func_page = MainFuncPage(driver)\n        main_func_page.click_on_constructor_button()\n        main_func_page.add_ingredient_into_order(MainFuncLocators.BULKA, MainFuncLocators.ORDER_CONSTRUCTOR)\n    \n>       assert main_func_page.find_element_with_wait(MainFuncLocators.PRICE_1976), \"Каунтер не содержит нужную цену\"\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests\\test_main_func.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\base_page.py:11: in find_element_with_wait\n    WebDriverWait(self.driver, 10).until(expected_conditions.visibility_of_element_located(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"8277fa02-368e-46db-88dd-9456b1d5d213\")>, method = <function visibility_of_element_located.<locals>._predicate at 0x0000021488D21940>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:552:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "steps": [{"name": "Клик на кнопку Конструктор", "status": "passed", "start": 1749140675078, "stop": 1749140675337}, {"name": "Перетаскивание ингредиента в заказ", "status": "passed", "parameters": [{"name": "source_locator", "value": "('xpath', \"//a[contains(@class, 'BurgerIngredient_ingredient__1TVf6')]//p[text()='Флюоресцентная булка R2-D3']\")"}, {"name": "target_locator", "value": "('xpath', \"//span[text()='Перетяните булочку сюда (верх)']/ancestor::li\")"}], "start": 1749140675337, "stop": 1749140675874}], "parameters": [{"name": "driver", "value": "'firefox'"}], "start": 1749140670540, "stop": 1749140685942, "uuid": "129a6af5-1cf3-4b4e-8295-585ad0200391", "historyId": "82e0ab37a158211afcc3b62ac2b8bc5d", "testCaseId": "73e7fc3f180361039a5204c3c1bb3cdb", "fullName": "tests.test_main_func.TestMainFunc#test_add_ingredient_into_order", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_main_func"}, {"name": "subSuite", "value": "TestMainFunc"}, {"name": "host", "value": "WIN-E0CER839EN3"}, {"name": "thread", "value": "4476-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_main_func"}]}